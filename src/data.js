export const OPERATORS = [
  {
    id: 1,
    name: "adición",
    operator: "+",
    description: [
      "Este operador se utiliza para sumar dos valores, o para concatenar dos cadenas de texto.",
      "Si se intenta sumar un número con una cadena de texto, Python lanzará un TypeError.",
      "Si se utiliza entre dos listas, Python las concatenará.",
    ],
    code: `print(1 + 1) # 2\nprint("hola" + "mundo") # holamundo\nprint([1, 2] + [3, 4]) # [1, 2, 3, 4]`,
    docs: "https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations",
  },
  {
    id: 2,
    name: "sustracción",
    operator: "-",
    description: [
      "Este operador substrae un numero de otro.",
      "También se puede utilizar como un operador unario para cambiar el signo de un número.",
    ],
    code: `print(5 - 3) # 2\nprint(-5) # -5`,
    docs: "https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations",
  },
  {
    id: 3,
    name: "multiplicación",
    operator: "*",
    description: [
      "Este operador calcula el producto de dos números.",
      "También se puede utilizar para repetir una cadena de texto o los elementos de una lista. ",
    ],
    code: `print(2 * 3) # 6\nprint("hola" * 3) # holaholahola\nprint([1, 2] * 3) # [1, 2, 1, 2, 1, 2]`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations",
  },
  {
    id: 4,
    name: "división",
    operator: "/",
    description: [
      "Este operador calcula el cociente de dos números.",
      "Si se utilizan dos números enteros, el resultado será un número flotante. Si se utilizan dos números flotantes, el resultado será un número flotante. Si se intenta dividir por cero, Python lanzará un ZeroDivisionError.",
    ],
    code: `print(10 / 2) # 5.0\nprint(5 / 2) # 2.5\nprint(5 / 0) # ZeroDivisionError`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations",
  },
  {
    id: 5,
    name: "división entera",
    operator: "//",
    description: [
      "Este operador calcula el cociente entero de dos números (izquierdo / derecho), lo cual significa que el resultado siempre será un número entero. En otras palabras, Python solo toma la parte entera del resultado de la división, sin hacer ningún tipo de redondeo.",
      "Si se intenta dividir por cero, Python lanzará un ZeroDivisionError.",
    ],
    code: `print(10 // 2) # 5\nprint(5 // 2) # 2\nprint(5 // 0) # ZeroDivisionError`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations",
  },
  {
    id: 6,
    name: "módulo",
    operator: "%",
    description: [
      "Este operador calcula el remanente de una operación de división.",
      "Uno de sus usos más comunes es cuando se busca determinar si un número es par o non.",
      "Si se intenta dividir por cero, Python lanzará un ZeroDivisionError.",
    ],
    code: `print(10 % 3) # 1\n# Verificando si un numero es par o no\nprint(4 % 2 == 0) # True\nprint(5 % 2 == 0) # False\nprint(5 % 0) # ZeroDivisionError`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations",
  },
  {
    id: 7,
    name: "potencia",
    operator: "**",
    description: [
      "Este operador multiplica un valor por si mismo, una cantidad determinada de veces.",
    ],
    code: `x = 2\nprint(x ** 2) # 4\nprint(x ** 3) # 8`,
    docs: "https://docs.python.org/3/reference/expressions.html#the-power-operator",
  },
  {
    id: 8,
    name: "asignación",
    operator: "=",
    description: [
      "Este operador asigna un nombre especificado por el usuario a un valor en memoria. La combinación del nombre y el valor al que apunta se conoce como variable.",
    ],
    code: `x = 10\ny = "hola"`,
    docs: "",
  },
  {
    id: 9,
    name: "asignación bajo adición",
    operator: "+=",
    description: [
      "Este operador agrega el valor dado a una variable, y sobrescribe el valor de la variable con el resultado (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
      "Se puede utilizar para concatenar cadenas de texto o agregar elementos a listas.",
    ],
    code: `x = 10\nx += 1\nprint(x) # 11 (10 + 1)\n\ny = "hola"\ny += " mundo"\nprint(y) # hola mundo`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 10,
    name: "asignación bajo sustracción",
    operator: "-=",
    description: [
      "Este operador sustrae el valor dado a una variable, y sobrescribe el valor de la variable con el resultado (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx -= 1\nprint(x) # 9 (10 - 1)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 11,
    name: "asignación bajo multiplicación",
    operator: "*=",
    description: [
      "Este operador multiplica una variable por el valor dado, y sobrescribe el valor de la variable con el resultado (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx *= 5\nprint(x) # 50 (10 * 5)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 12,
    name: "asignación bajo división",
    operator: "/=",
    description: [
      "Este operador divide una variable por el valor dado, y sobrescribe el valor de la variable con el resultado (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx /= 5\nprint(x) # 2 (10 / 5)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 13,
    name: "asignación bajo división entera",
    operator: "//=",
    description: [
      "Este operador divide enteramente una variable por el valor dado, y sobrescribe el valor de la variable con el resultado (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx //= 3\nprint(x) # 3 (10 // 3)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 14,
    name: "asignación bajo módulo",
    operator: "%=",
    description: [
      "Este operador divide una variable por el valor dado, y sobrescribe el valor de la variable con el remanente de la operación (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx %= 3\nprint(x) # 1 (10 % 3)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 15,
    name: "asignación bajo exponenciación",
    operator: "**=",
    description: [
      "Este operador divide una variable por el valor dado, y sobrescribe el valor de la variable con el remanente de la operación (en realidad, el nombre es redireccionado para apuntar al nuevo valor en memoria, ya que la primitiva int en Python es inmutable).",
    ],
    code: `x = 10\nx %= 3\nprint(x) # 1 (10 % 3)`,
    docs: "https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements",
  },
  {
    id: 16,
    name: "igualdad",
    operator: "==",
    description: [
      "Este operador compara dos valores, y devuelve True si son iguales, y False si no lo son.",
    ],
    code: `print(10 == 10) # True\nprint("hola" == "mundo") # False`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 17,
    name: "diferencia",
    operator: "!=",
    description: [
      "Este operador compara dos valores, y devuelve True si son diferentes, y False si son iguales.",
    ],
    code: `print(10 != 10) # False\nprint("hola" == "mundo") # True`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 18,
    name: "mayor que",
    operator: ">",
    description: [
      "Este operador compara dos valores, y devuelve True si el valor de la izquierda es mayor que el valor de la derecha, y False si no lo es.",
    ],
    code: `print(10 > 5) # True\nprint(15 > 20) # False`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 19,
    name: "mayor o igual que",
    operator: ">=",
    description: [
      "Este operador compara dos valores, y devuelve True si el valor de la izquierda es mayor o igual que el valor de la derecha, y False si no lo es.",
    ],
    code: `print(10 >= 5) # True\nprint(15 >= 20) # False\nprint(10 >= 10) # True`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 20,
    name: "menor que",
    operator: "<",
    description: [
      "Este operador compara dos valores, y devuelve True si el valor de la izquierda es menor que el valor de la derecha, y False si no lo es.",
    ],
    code: `print(10 < 20) # True\nprint(15 < 10) # False`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 21,
    name: "menor o igual que",
    operator: "<=",
    description: [
      "Este operador compara dos valores, y devuelve True si el valor de la izquierda es menor o igual que el valor de la derecha, y False si no lo es.",
    ],
    code: `print(10 <= 20) # True\nprint(15 <= 10) # False\nprint(10 <= 10) # True`,
    docs: "https://docs.python.org/3/reference/expressions.html#value-comparisons",
  },
  {
    id: 22,
    name: "and",
    operator: "and",
    description: [
      "Este operador se utiliza para evaluar dos expresiones booleanas, y devuelve True si ambas son verdaderas, y False si alguna de ellas es falsa.",
    ],
    code: `print(True and True) # True\nprint(True and False) # False\nprint(False and False) # False`,
    docs: "https://docs.python.org/3/reference/expressions.html#boolean-operations",
  },
  {
    id: 23,
    name: "or",
    operator: "or",
    description: [
      "Este operador se utiliza para evaluar dos expresiones booleanas, y devuelve True si alguna de ellas es verdadera, y False si ambas son falsas.",
    ],
    code: `print(True or True) # True\nprint(True or False) # True\nprint(False or False) # False`,
    docs: "https://docs.python.org/3/reference/expressions.html#boolean-operations",
  },
  {
    id: 24,
    name: "not",
    operator: "not",
    description: [
      "Este operador se utiliza para negar una expresión booleana, y devuelve True si la expresión es falsa, y False si es verdadera.",
    ],
    code: `print(not True) # False\nprint(not False) # True`,
    docs: "https://docs.python.org/3/reference/expressions.html#boolean-operations",
  },
  {
    id: 25,
    name: "in",
    operator: "in",
    description: [
      "Este operador se utiliza para verificar si un valor se encuentra en una secuencia de valores.",
      "Si el valor se encuentra en la secuencia, el operador devuelve True, de lo contrario, devuelve False.",
    ],
    code: `print(1 in [1, 2, 3]) # True\nprint(4 in [1, 2, 3]) # False`,
    docs: "",
  },
  {
    id: 26,
    name: "is",
    operator: "is",
    description: [
      "Este operador se utiliza para comparar si dos objetos son el mismo objeto en memoria. Este operador es el recomendado cuando se quieren realizar comparaciones con None.",
      "Si los objetos son el mismo objeto, el operador devuelve True, de lo contrario, devuelve False.",
    ],
    code: `x = [1, 2, 3]\ny = x\nprint(x is y) # True\n\nx = [1, 2, 3]\ny = [1, 2, 3]\nprint(x is y) # False\n\nx = None\nprint(x is None) # True`,
    docs: "",
  },
  {
    id: 27,
    name: "walrus",
    operator: ":=",
    description: [
      "Este operador se utiliza para asignar un valor a una variable y devolverlo al mismo tiempo. Es útil cuando se quiere asignar un valor a una variable y utilizarlo en una expresión al mismo tiempo.",
      "Se introdujo en Python 3.8, y es un poco complicado de entender sin ver un ejemplo.",
    ],
    code: `if (n := len([1, 2, 3])) > 2:\n    print(n) # 3\n\n# Mientras que el usuario no escriba "salir", permanecerá dentro del loop\nwhile (n := input("Escribe algo: ")) != "salir":\n    print(n)`,
    docs: "https://docs.python.org/3/reference/expressions.html#assignment-expressions",
  },
  {
    id: 28,
    name: "ellipsis",
    operator: "...",
    description: [
      "Este operador se utiliza como un placeholder para código que aún no ha sido implementado.",
    ],
    code: `if (n := len([1, 2, 3])) > 2:\n    print(n) # 3\n\n# Mientras que el usuario no escriba "salir", permanecerá dentro del loop\nwhile (n := input("Escribe algo: ")) != "salir":\n    print(n)`,
    docs: "",
  },
  {
    id: 29,
    name: "bitwise and",
    operator: "&",
    description: [
      "Este operador realiza una operación AND bit a bit entre dos números.",
      "Básicamente, compara los bits de los números, y devuelve un nuevo número 1 con los bits que son 1 en ambos números.",
      "Por defecto, al imprimir un número en Python, se importa como un número decimal. Para forzar la impresión de la notación binaria, podemos utilizar la función bin().",
    ],
    code: `print(bin(0b1010 & 0b1100)) # 0b1000`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations",
  },
  {
    id: 30,
    name: "bitwise or",
    operator: "|",
    description: [
      "Este operador realiza una operación OR bit a bit entre dos números.",
      "Básicamente, compara los bits de los números, y devuelve un nuevo número 1 con los bits que son 1 en al menos uno de los números.",
      "Por defecto, al imprimir un número en Python, se importa como un número decimal. Para forzar la impresión de la notación binaria, podemos utilizar la función bin().",
    ],
    code: `print(bin(0b1010 | 0b1100)) # 0b1110`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations",
  },
  {
    id: 31,
    name: "bitwise xor",
    operator: "^",
    description: [
      "Este operador realiza una operación XOR bit a bit entre dos números.",
      "Básicamente, compara los bits de los números, y devuelve un nuevo número 1 con los bits que son 1 en uno de los números, pero no en ambos.",
      "Por defecto, al imprimir un número en Python, se importa como un número decimal. Para forzar la impresión de la notación binaria, podemos utilizar la función bin().",
    ],
    code: `print(bin(0b1010 ^ 0b1100)) # 0b0110`,
    docs: "https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations",
  },
  {
    id: 32,
    name: "bitwise not",
    operator: "~",
    description: [
      "Este operador realiza una operación NOT bit a bit en un número.",
    ],
    code: `x = 0b1010\nprint(bin(~x)) # -0b1011`,
    docs: "https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations",
  },
  {
    id: 33,
    name: "bitwise left shift",
    operator: "<<",
    description: [
      "Este operador realiza una operación de desplazamiento a la izquierda por un número determinado de bits.",
      "Básicamente, mueve los bits de un número hacia la izquierda, y rellena los bits vacíos con ceros.",
    ],
    code: `x = 0b1010 # Este es el número 10\nprint(x << 1) # 20, que es 0b10100 en binario\nprint(x << 2) # 40, que es 0b101000 en binario`,
    docs: "https://docs.python.org/3/reference/expressions.html#shifting-operations",
  },
  {
    id: 34,
    name: "bitwise right shift",
    operator: ">>",
    description: [
      "Este operador realiza una operación de desplazamiento a la derecha por un número determinado de bits.",
      "Básicamente, mueve los bits de un número hacia la derecha, y rellena los bits vacíos con ceros.",
    ],
    code: `x = 0b1010 # Este es el número 10\nprint(x >> 1) # 5, que es 0b101 en binario\nprint(x >> 2) # 2, que es 0b10 en binario`,
    docs: "https://docs.python.org/3/reference/expressions.html#shifting-operations",
  },
];
